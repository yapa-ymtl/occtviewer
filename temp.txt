#ifndef MYGLWIDGET_H
#define MYGLWIDGET_H

#include <QOpenGLWidget>
#include <QOpenGLFunctions>

#include <Aspect_DisplayConnection.hxx>
#include <Graphic3d_GraphicDriver.hxx>
#include <V3d_View.hxx>
#include <AIS_InteractiveContext.hxx>
#include <TopoDS_Shape.hxx>

class MyGLWidget : public QOpenGLWidget, protected QOpenGLFunctions
{
    Q_OBJECT

public:
    explicit MyGLWidget(QWidget* parent = nullptr);
    ~MyGLWidget();

protected:
    void initializeGL() override;
    void resizeGL(int w, int h) override;
    void paintGL() override;
    void showEvent(QShowEvent* event) override;

private:
    Handle(Aspect_DisplayConnection) m_displayConnection;
    Handle(Graphic3d_GraphicDriver) m_driver;
    Handle(V3d_View) m_view;
    Handle(AIS_InteractiveContext) m_context;
    TopoDS_Shape m_shape;
};

#endif // MYGLWIDGET_H
=============
#include "myglwidget.h"

#include <QDebug>
#include <QGuiApplication>
#include <QResizeEvent>

#include <Aspect_DisplayConnection.hxx>
#include <OpenGl_GraphicDriver.hxx>
#include <Graphic3d_GraphicDriver.hxx>
#include <V3d_Viewer.hxx>
#include <AIS_InteractiveContext.hxx>
#include <AIS_Shape.hxx>
#include <BRepPrimAPI_MakeBox.hxx>

#ifdef Q_OS_LINUX
#include <X11/Xlib.h>
#include <Xw_Window.hxx>
#include <QX11Info>
#endif

MyGLWidget::MyGLWidget(QWidget* parent)
    : QOpenGLWidget(parent)
{
    setMinimumSize(400, 300);  // Ensure widget is visible
    qDebug() << "MyGLWidget constructed";
}

MyGLWidget::~MyGLWidget() = default;

void MyGLWidget::initializeGL()
{
    qDebug() << "initializeGL() called";

    initializeOpenGLFunctions();

    // Display connection and driver
    m_displayConnection = new Aspect_DisplayConnection();

    if (m_driver.IsNull())
    {
        m_driver = new OpenGl_GraphicDriver(m_displayConnection);
    }

    // Viewer
    Handle(V3d_Viewer) viewer = new V3d_Viewer(m_driver);
    viewer->SetDefaultLights();
    viewer->SetLightOn();

    // View and context
    m_view = viewer->CreateView();
    m_context = new AIS_InteractiveContext(viewer);
    m_view->SetBackgroundColor(Quantity_NOC_GRAY);

    // Create a shape
    m_shape = BRepPrimAPI_MakeBox(100.0, 50.0, 90.0).Shape();
    Handle(AIS_Shape) aisShape = new AIS_Shape(m_shape);
    m_context->Display(aisShape, true);
}

void MyGLWidget::showEvent(QShowEvent* event)
{
    QOpenGLWidget::showEvent(event);
    qDebug() << "showEvent() called";

#ifdef Q_OS_LINUX
    if (!m_view.IsNull() && m_view->Window().IsNull())
    {
        Display* xDisplay = QX11Info::display();
        Window xWin = static_cast<Window>(winId());

        Handle(Xw_Window) occtWindow = new Xw_Window(m_displayConnection, xWin);
        if (!occtWindow->IsMapped())
        {
            occtWindow->Map();
        }

        m_view->SetWindow(occtWindow);
        m_view->MustBeResized();
        m_view->FitAll();
    }
#endif

    m_view->Redraw();
}

void MyGLWidget::resizeGL(int w, int h)
{
    qDebug() << "resizeGL(" << w << "," << h << ")";
    if (!m_view.IsNull() && !m_view->Window().IsNull())
    {
        m_view->Window()->DoResize();
        m_view->MustBeResized();
    }
}

void MyGLWidget::paintGL()
{
    qDebug() << "paintGL() called";
    if (!m_view.IsNull())
    {
        m_view->Redraw();
    }
}
==============
#include <QGuiApplication>
#include <QNativeInterface>

if (auto *x11App = qGuiApp->nativeInterface<QNativeInterface::QX11Application>()) {
    Display *display = x11App->display();
}
