mkdir build
cd build

cmake .. \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX=~/occt-install \
  -DUSE_GL2PS=OFF \
  -DUSE_TK=OFF \
  -DBUILD_MODULE_Draw=OFF \
  -DBUILD_MODULE_ApplicationFramework=OFF
================
#ifndef MYGLWIDGET_H
#define MYGLWIDGET_H

#include <QOpenGLWidget>
#include <QOpenGLFunctions>

#include <AIS_InteractiveContext.hxx>
#include <V3d_View.hxx>
#include <Graphic3d_GraphicDriver.hxx>
#include <TopoDS_Shape.hxx>

class MyGLWidget : public QOpenGLWidget, protected QOpenGLFunctions {
    Q_OBJECT

public:
    explicit MyGLWidget(QWidget* parent = nullptr);
    ~MyGLWidget();

protected:
    void initializeGL() override;
    void resizeGL(int w, int h) override;
    void paintGL() override;
    void showEvent(QShowEvent* event) override;

private:
    Handle(V3d_View) m_view;
    Handle(AIS_InteractiveContext) m_context;
    Handle(Graphic3d_GraphicDriver) m_driver;
    TopoDS_Shape m_shape;
};

#endif // MYGLWIDGET_H
==================
#include "myglwidget.h"

#include <QDebug>
#include <QGuiApplication>
#include <QWindow>
#include <QOpenGLContext>
#include <QSurfaceFormat>

#include <Aspect_DisplayConnection.hxx>
#include <OpenGl_GraphicDriver.hxx>
#include <Graphic3d_GraphicDriver.hxx>
#include <V3d_Viewer.hxx>
#include <AIS_InteractiveContext.hxx>
#include <AIS_Shape.hxx>
#include <BRepPrimAPI_MakeBox.hxx>

#ifdef Q_OS_UNIX
#include <X11/Xlib.h>
#include <Xw_Window.hxx>
#include <QNativeInterface>
#endif

MyGLWidget::MyGLWidget(QWidget* parent)
    : QOpenGLWidget(parent)
{
    qDebug() << "MyGLWidget constructor";
    setMinimumSize(600, 400);
}

MyGLWidget::~MyGLWidget() = default;

void MyGLWidget::initializeGL()
{
    qDebug() << "initializeGL called";

    initializeOpenGLFunctions();

    Handle(Aspect_DisplayConnection) displayConnection = new Aspect_DisplayConnection();

    if (m_driver.IsNull()) {
        m_driver = new OpenGl_GraphicDriver(displayConnection);
    }

    Handle(V3d_Viewer) viewer = new V3d_Viewer(m_driver);
    viewer->SetDefaultLights();
    viewer->SetLightOn();

    m_context = new AIS_InteractiveContext(viewer);
    m_view = viewer->CreateView();

    m_view->SetBackgroundColor(Quantity_NOC_BLACK);

    // Create test shape
    m_shape = BRepPrimAPI_MakeBox(100.0, 50.0, 90.0).Shape();
    Handle(AIS_Shape) aisShape = new AIS_Shape(m_shape);
    m_context->Display(aisShape, true);
}

void MyGLWidget::resizeGL(int w, int h)
{
    if (!m_view.IsNull() && !m_view->Window().IsNull()) {
        m_view->Window()->DoResize();
        m_view->MustBeResized();
    }
}

void MyGLWidget::paintGL()
{
    if (!m_view.IsNull())
        m_view->Redraw();
}

void MyGLWidget::showEvent(QShowEvent* event)
{
    QOpenGLWidget::showEvent(event);

#ifdef Q_OS_UNIX
    auto* x11App = QGuiApplication::nativeInterface<QNativeInterface::QX11Application>();
    if (!x11App) {
        qWarning() << "X11 interface not available. Are you running on Wayland?";
        return;
    }

    Display* xDisplay = x11App->display();
    Window xWindow = static_cast<Window>(winId());

    Handle(Xw_Window) window = new Xw_Window(xDisplay, xWindow);

    if (!window->IsMapped())
        window->Map();

    m_view->SetWindow(window);
    m_view->MustBeResized();
    m_view->FitAll();
    m_view->Redraw();
#endif
}
