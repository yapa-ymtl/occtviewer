mkdir build
cd build

cmake .. \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX=~/occt-install \
  -DUSE_GL2PS=OFF \
  -DUSE_TK=OFF \
  -DBUILD_MODULE_Draw=OFF \
  -DBUILD_MODULE_ApplicationFramework=OFF
================
#ifndef MYGLWIDGET_H
#define MYGLWIDGET_H

#include <QOpenGLWidget>
#include <QOpenGLFunctions>
#include <QShowEvent>

#include <AIS_InteractiveContext.hxx>
#include <V3d_View.hxx>
#include <V3d_Viewer.hxx>
#include <TopoDS_Shape.hxx>
#include <Graphic3d_GraphicDriver.hxx>
#include <OpenGl_GraphicDriver.hxx>
#include <Aspect_DisplayConnection.hxx>

class MyGLWidget : public QOpenGLWidget, protected QOpenGLFunctions
{
    Q_OBJECT

public:
    MyGLWidget(QWidget* parent = nullptr);
    ~MyGLWidget();

protected:
    void initializeGL() override;
    void resizeGL(int w, int h) override;
    void paintGL() override;
    void showEvent(QShowEvent* event) override;

private:
    Handle(Aspect_DisplayConnection) m_displayConnection;
    Handle(Graphic3d_GraphicDriver) m_driver;
    Handle(V3d_Viewer) m_viewer;
    Handle(AIS_InteractiveContext) m_context;
    Handle(V3d_View) m_view;
    TopoDS_Shape m_shape;
};

#endif // MYGLWIDGET_H

==================
#include "myglwidget.h"

#include <QGuiApplication>
#include <QDebug>
#include <QSurfaceFormat>

#include <Aspect_DisplayConnection.hxx>
#include <OpenGl_GraphicDriver.hxx>
#include <V3d_Viewer.hxx>
#include <AIS_Shape.hxx>
#include <BRepPrimAPI_MakeBox.hxx>
#include <Graphic3d_GraphicDriver.hxx>

#include <QOpenGLContext>

#ifdef Q_OS_UNIX
#include <X11/Xlib.h>
#include <Xw_Window.hxx>
#include <QWindow>
#endif

MyGLWidget::MyGLWidget(QWidget* parent)
    : QOpenGLWidget(parent)
{
    setMinimumSize(800, 600);
    qDebug() << "MyGLWidget constructed.";
}

MyGLWidget::~MyGLWidget() = default;

void MyGLWidget::initializeGL()
{
    qDebug() << "initializeGL() called";
    initializeOpenGLFunctions();

    m_displayConnection = new Aspect_DisplayConnection();

    if (m_driver.IsNull())
    {
        m_driver = new OpenGl_GraphicDriver(m_displayConnection);
    }

    m_viewer = new V3d_Viewer(m_driver);
    m_viewer->SetDefaultLights();
    m_viewer->SetLightOn();

    m_context = new AIS_InteractiveContext(m_viewer);
    m_view = m_viewer->CreateView();

    m_view->SetBackgroundColor(Quantity_NOC_BLACK);

    // OCCT Shape
    m_shape = BRepPrimAPI_MakeBox(100.0, 50.0, 90.0).Shape();
    Handle(AIS_Shape) aisShape = new AIS_Shape(m_shape);
    m_context->Display(aisShape, true);
}

void MyGLWidget::resizeGL(int w, int h)
{
    if (!m_view.IsNull() && !m_view->Window().IsNull())
    {
        m_view->Window()->DoResize();
        m_view->MustBeResized();
        m_view->FitAll();
    }
}

void MyGLWidget::paintGL()
{
    if (!m_view.IsNull())
    {
        m_view->Redraw();
    }
}

void MyGLWidget::showEvent(QShowEvent* event)
{
    QOpenGLWidget::showEvent(event);
    qDebug() << "showEvent() called";

#ifdef Q_OS_UNIX
    if (!m_view.IsNull() && m_view->Window().IsNull())
    {
        auto* x11App = QGuiApplication::nativeInterface<QNativeInterface::QX11Application>();
        if (!x11App)
        {
            qWarning() << "X11 interface is not available!";
            return;
        }

        Display* xDisplay = x11App->display();
        Window xWindow = static_cast<Window>(winId());

        Handle(Xw_Window) occtWindow = new Xw_Window(m_displayConnection, xWindow);
        if (!occtWindow->IsMapped())
            occtWindow->Map();

        m_view->SetWindow(occtWindow);
        m_view->MustBeResized();
        m_view->FitAll();
        m_view->Redraw();
    }
#endif
}

